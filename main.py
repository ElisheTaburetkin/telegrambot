#!/usr/bin/python
# -*- coding: utf-8 -*-
# aiogram
from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State,StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton,InputFile
from aiogram.dispatcher.filters import Text

# bot config
from bot_config import *

#for watch project dir
import os

# Database
from SQLWORK import DataBase
import sqlite3

# creating bot and dispatcher
storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot, storage=storage)

# States
class NewAd(StatesGroup):
    type = State()
    name = State()
    description = State()
    photo = State()
    price = State()
    userid = State()

class WatchAd(StatesGroup):
    type = State()
    pages = State()
    page = State()

class Admin(StatesGroup):
    AdminPannel = State()
    DeleteAds = State()

class Myads(StatesGroup):
    pages = State()
    page = State()




def main():

    # START KEYBOARD
    watch_ob = InlineKeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è', callback_data='watch')
    create_ob = InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data='create')
    my_ads = InlineKeyboardButton('–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', callback_data='my_ads')
    admin_rev = InlineKeyboardButton('–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', url='t.me/myth75')
    rules = InlineKeyboardButton('–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', callback_data='rules')
    video_guide = InlineKeyboardButton('–í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data='video')
    startkb = InlineKeyboardMarkup(row_width=1).add(watch_ob,create_ob,my_ads,admin_rev,rules,video_guide)

    # ADMIN KEYBOARD
    admin_buttons = ['–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π‚úî', '–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–πüóëÔ∏è', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä', '–í—ã—Ö–æ–¥üèÉ']
    admin_kb = ReplyKeyboardMarkup(resize_keyboard=True)
    admin_kb.add(*admin_buttons)

    # CATEGORY KEYBOARD
    catbuttons = [
                  InlineKeyboardButton('–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –ú–æ—Å–∫–≤–∞ –∏ –ú–û', callback_data='–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –ú–æ—Å–∫–≤–∞ –∏ –ú–û'),
                  InlineKeyboardButton('–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏ –õ–û', callback_data='–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏ –õ–û'),
                  InlineKeyboardButton('–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π', callback_data='–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π'),
                  InlineKeyboardButton('–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –†–§', callback_data='–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –†–§'),
                  InlineKeyboardButton('–ó–∞—Ä—É–±–µ–∂–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', callback_data='–ó–∞—Ä—É–±–µ–∂–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å'),
                  InlineKeyboardButton('–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', callback_data='–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å'),
                  InlineKeyboardButton('–ê—Ä–µ–Ω–¥–∞ –ú–æ—Å–∫–≤–∞', callback_data='–ê—Ä–µ–Ω–¥–∞ –ú–æ—Å–∫–≤–∞'),
                  InlineKeyboardButton('–ê—Ä–µ–Ω–¥–∞ —Ä–µ–≥–∏–æ–Ω—ã –†–§', callback_data='–ê—Ä–µ–Ω–¥–∞ —Ä–µ–≥–∏–æ–Ω—ã –†–§'),
                  InlineKeyboardButton('–ü—Ä–æ–¥–∞–∂–∞ –±–∏–∑–Ω–µ—Å–∞', callback_data='–ü—Ä–æ–¥–∞–∂–∞ –±–∏–∑–Ω–µ—Å–∞'),
                  InlineKeyboardButton('–ü—Ä–æ–¥–∞–∂–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è', callback_data='–ü—Ä–æ–¥–∞–∂–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'),
                  InlineKeyboardButton('–î—Ä—É–≥–æ–µ', callback_data='–î—Ä—É–≥–æ–µ'),
                  InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel')]
    ctkb = InlineKeyboardMarkup(row_width=1).add(*catbuttons)

    catcrbuttons = [
                  InlineKeyboardButton('–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –ú–æ—Å–∫–≤–∞ –∏ –ú–û', callback_data='–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –ú–æ—Å–∫–≤–∞ –∏ –ú–û'),
                  InlineKeyboardButton('–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏ –õ–û', callback_data='–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏ –õ–û'),
                  InlineKeyboardButton('–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π', callback_data='–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π'),
                  InlineKeyboardButton('–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –†–§', callback_data='–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –†–§'),
                  InlineKeyboardButton('–ó–∞—Ä—É–±–µ–∂–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', callback_data='–ó–∞—Ä—É–±–µ–∂–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å'),
                  InlineKeyboardButton('–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', callback_data='–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å'),
                  InlineKeyboardButton('–ê—Ä–µ–Ω–¥–∞ –ú–æ—Å–∫–≤–∞', callback_data='–ê—Ä–µ–Ω–¥–∞ –ú–æ—Å–∫–≤–∞'),
                  InlineKeyboardButton('–ê—Ä–µ–Ω–¥–∞ —Ä–µ–≥–∏–æ–Ω—ã –†–§', callback_data='–ê—Ä–µ–Ω–¥–∞ —Ä–µ–≥–∏–æ–Ω—ã –†–§'),
                  InlineKeyboardButton('–ü—Ä–æ–¥–∞–∂–∞ –±–∏–∑–Ω–µ—Å–∞', callback_data='–ü—Ä–æ–¥–∞–∂–∞ –±–∏–∑–Ω–µ—Å–∞'),
                  InlineKeyboardButton('–ü—Ä–æ–¥–∞–∂–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è', callback_data='–ü—Ä–æ–¥–∞–∂–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'),
                  InlineKeyboardButton('–î—Ä—É–≥–æ–µ', callback_data='–î—Ä—É–≥–æ–µ'),
                  InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel')]
    ctkbc = InlineKeyboardMarkup(row_width=1).add(*catcrbuttons)

    # CANCEL KEYBOARD
    cnck = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel')
    cnkb = InlineKeyboardMarkup(row_width=1).add(cnck)

    # GM KEYBOARD
    cnck = InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='cancel')
    gmkb = InlineKeyboardMarkup(row_width=1).add(cnck)

    # start func
    async def start_message_send(userid):
        await db.add_user(userid)
        await bot.send_photo(userid, photo=InputFile("images/doska-obyavlenii.png"),
                             caption=f"–®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ—Ç –Ω–∞–¥–µ–∂–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π. –ù–∞ –Ω–∞—à–µ–π –¥–æ—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å—Ç–∞–Ω–∫–∏, —Ä–µ–∑–∞–∫–∏, –ø—Ä–µ—Å—Å-—Ñ–æ—Ä–º—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {await db.get_len_users()} , —Ä–∞–∑–º–µ—â–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {await db.get_len_ads()}.\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.",
                             reply_markup=startkb)

# start command logic

    @dp.message_handler(commands=['start'])
    async def process_start_command(message: types.Message):
        #await db.add_user(message.from_user.id)
        #await bot.send_photo(message.chat.id, photo=InputFile("images/doska-obyavlenii.png"), caption=f"–®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ—Ç –Ω–∞–¥–µ–∂–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π. –ù–∞ –Ω–∞—à–µ–π –¥–æ—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å—Ç–∞–Ω–∫–∏, —Ä–µ–∑–∞–∫–∏, –ø—Ä–µ—Å—Å-—Ñ–æ—Ä–º—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {await db.get_len_users()} , —Ä–∞–∑–º–µ—â–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {await db.get_len_ads()}.\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.",reply_markup=startkb)
        await start_message_send(message.from_user.id)
# admin command logic
    @dp.message_handler(commands=['admin'])
    async def process_admin_command(message: types.Message,state: FSMContext):
        await message.answer('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞...')
        if str(message.from_user.id) in ADMINUID:
            await message.answer('–î–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω!‚úÖ',reply_markup=admin_kb)
            await state.set_state('Admin:AdminPannel')
        else:
            await message.answer('–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ‚ùå')

# cancel button logic

    @dp.callback_query_handler(lambda c: c.data == 'cancel',state=NewAd)
    async def process_callback_button(callback_query: types.CallbackQuery, state: FSMContext):
        current_state = await state.get_state()
        if current_state=='NewAd:type':
            await state.reset_state()
            await start_message_send(callback_query.from_user.id)
        elif current_state=='NewAd:name':
            await state.set_state('NewAd:type')
            await bot.send_message(chat_id=callback_query.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞',
                                   reply_markup=ctkbc)
        elif current_state == 'NewAd:description':
            await state.set_state('NewAd:name')
            await bot.send_message(chat_id=callback_query.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞(–¥–æ 66 —Å–∏–º–≤–æ–ª–æ–≤)',
                                   reply_markup=cnkb)
        elif current_state == 'NewAd:photo':
            await state.set_state('NewAd:description')
            await bot.send_message(chat_id=callback_query.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞(–¥–æ 650 —Å–∏–º–≤–æ–ª–æ–≤)',
                                   reply_markup=cnkb)
        elif current_state == 'NewAd:price':
            await state.set_state('NewAd:photo')
            await bot.send_message(chat_id=callback_query.from_user.id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞',
                                   reply_markup=cnkb)
        elif current_state == 'NewAd:userid':
            await state.set_state('NewAd:price')
            await bot.send_message(chat_id=callback_query.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞',
                                   reply_markup=cnkb)

    @dp.callback_query_handler(lambda c: c.data == 'cancel', state=WatchAd)
    async def process_callback_button(callback_query: types.CallbackQuery, state: FSMContext):
        current_state = await state.get_state()
        if current_state == 'WatchAd:type':
            await state.reset_state()
            await start_message_send(callback_query.from_user.id)
        elif current_state == 'WatchAd:page':
            await state.set_state('WatchAd:type')
            await bot.send_message(chat_id=callback_query.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞',
                                   reply_markup=ctkb)

    @dp.callback_query_handler(lambda c: c.data == 'cancel', state=Myads)
    async def process_callback_button(callback_query: types.CallbackQuery, state: FSMContext):
        await state.reset_state()
        await start_message_send(callback_query.from_user.id)


# create or watch select

    @dp.callback_query_handler()
    async def newad(callback_query: types.CallbackQuery, state: FSMContext):
        if callback_query.data == 'create':
            await NewAd.type.set()
            await bot.send_message(chat_id=callback_query.from_user.id,text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞',reply_markup=ctkbc)

        elif callback_query.data == 'watch':
            await WatchAd.type.set()
            await bot.send_message(chat_id=callback_query.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞',
                                   reply_markup=ctkb)

        elif callback_query.data == 'video':
            await bot.send_video(callback_query.from_user.id, open('images/videoguide.mp4', 'rb'))

        elif callback_query.data == 'rules':
            text = u"""
            –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ:
‚Ä¢	–û–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥.
‚Ä¢	–û–±—ä—è–≤–ª–µ–Ω–∏–π –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.
‚Ä¢	–û–±—ä—è–≤–ª–µ–Ω–∏–π, –Ω–µ –¥–∞—é—â–∏—Ö –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ —Ç–æ–≤–∞—Ä–µ –∏–ª–∏ —É—Å–ª—É–≥–µ.
‚Ä¢	–û–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∑–∞–≤–µ–¥–æ–º–æ –ª–æ–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ –∏–ª–∏ —É—Å–ª—É–≥–µ (—Ü–µ–Ω–∞ –≤ —Ü–µ–Ω–Ω–∏–∫–µ –∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—É, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–Ω–æ–º—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö, –∏ —Ç.–ø.)
–û–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä–∞—è:
1.	—Å–æ–¥–µ—Ä–∂–∏—Ç —É–≥—Ä–æ–∑—ã, –¥–∏—Å–∫—Ä–µ–¥–∏—Ç–∏—Ä—É–µ—Ç, –æ—Å–∫–æ—Ä–±–ª—è–µ—Ç, –ø–æ—Ä–æ—á–∏—Ç —á–µ—Å—Ç—å –∏ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ –∏–ª–∏ –¥–µ–ª–æ–≤—É—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é, –∏–ª–∏ –Ω–∞—Ä—É—à–∞–µ—Ç –Ω–µ–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–Ω–æ—Å—Ç—å —á–∞—Å—Ç–Ω–æ–π –∂–∏–∑–Ω–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü;
2.	–Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∞ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö –ª–∏—Ü;
3.	—è–≤–ª—è–µ—Ç—Å—è –≤—É–ª—å–≥–∞—Ä–Ω–æ–π –∏–ª–∏ –Ω–µ–ø—Ä–∏—Å—Ç–æ–π–Ω–æ–π, —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç—ã –∏–ª–∏ —Å—Ü–µ–Ω—ã —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ —Å —É—á–∞—Å—Ç–∏–µ–º –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö; —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –±—Ä–∞–Ω—å, –±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –±—Ä–∞–Ω–∏;
4.	—Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–µ—Å—Ç–æ–∫–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏;
5.	—Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ —Å–ø–æ—Å–æ–±–æ–≤ —Å—É–∏—Ü–∏–¥–∞, –ª—é–±–æ–µ –ø–æ–¥—Å—Ç—Ä–µ–∫–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∫ –µ–≥–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—é;
6.	–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Ä—É–µ—Ç –∏/–∏–ª–∏ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–∂–∏–≥–∞–Ω–∏—é —Ä–∞—Å–æ–≤–æ–π, —Ä–µ–ª–∏–≥–∏–æ–∑–Ω–æ–π, —ç—Ç–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏ –∏–ª–∏ –≤—Ä–∞–∂–¥—ã, –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Ä—É–µ—Ç —Ñ–∞—à–∏–∑–º –∏–ª–∏ –∏–¥–µ–æ–ª–æ–≥–∏—é —Ä–∞—Å–æ–≤–æ–≥–æ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞;
7.	—Å–æ–¥–µ—Ä–∂–∏—Ç —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã;
8.	–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Ä—É–µ—Ç –ø—Ä–µ—Å—Ç—É–ø–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–≤–µ—Ç—ã, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–ª–∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—é –ø—Ä–µ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
9.	—Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞, –≤–∫–ª—é—á–∞—è, –Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è—Å—å, –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Ç–∞–π–Ω–æ–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞—Å—Ç–Ω–æ–π –∂–∏–∑–Ω–∏ —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü;
10.	—Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∫–ª–∞–º—É –∏–ª–∏ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—â–µ—Å—Ç–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ ¬´—Ü–∏—Ñ—Ä–æ–≤—ã—Ö –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤¬ª (–∑–≤—É–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤, –æ–∫–∞–∑—ã–≤–∞—é—â–∏—Ö –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –º–æ–∑–≥ —á–µ–ª–æ–≤–µ–∫–∞ –∑–∞ —Å—á–µ—Ç –±–∏–Ω–∞—É—Ä–∞–ª—å–Ω—ã—Ö —Ä–∏—Ç–º–æ–≤), –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤, —Ä–µ—Ü–µ–ø—Ç—ã –∏—Ö –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∏ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é;
11.	–Ω–æ—Å–∏—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä;
12.	–Ω–∞—Ä—É—à–∞–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü;
13.	—Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∞–º, –≤ —Ç–æ–º —á–∏—Å–ª–µ –≤ –≤–∏–¥–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –±—É–∫–≤ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏, –≤ —Ç–æ–º —á–∏—Å–ª–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏/–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞, —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
14.	–Ω–∞—Ä—É—à–∞–µ—Ç –∏–Ω—ã–µ –ø—Ä–∞–≤–∞ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≥—Ä–∞–∂–¥–∞–Ω –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏;
15.	–æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∑–∏–Ω–æ, —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞—Ö, –ª—é–±—ã—Ö –∞–∑–∞—Ä—Ç–Ω—ã—Ö –∏–≥—Ä–∞—Ö –∏ –ø–∞—Ä–∏;
16.	—Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–∏—Ä–∞–º–∏–¥;
17.	—è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∫–ª–∞–º–æ–π.
            """
            await bot.send_message(chat_id=callback_query.from_user.id,text=text)

        elif callback_query.data == 'my_ads':
            await Myads.pages.set()
            async with state.proxy() as data:
                data['pages'] = await db.get_my_ads(callback_query.from_user.id)
                data['page'] = 1
                ads = data['pages']
            if len(ads) == 0:
                await callback_query.message.answer('–ü–æ–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç:(', reply_markup=gmkb)
            else:
                for i in ads[0]:
                    buttons = [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—åüóëÔ∏è', callback_data=f'delete_{i[0]}')]
                    kb = InlineKeyboardMarkup(row_width=1).add(*buttons)
                    await bot.send_photo(chat_id=callback_query.from_user.id, photo=InputFile(os.getcwd() + i[4]),
                                         caption=f' –ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[3]}\n–¶–µ–Ω–∞: {i[5]}‚ÇΩ\nUsername/—Ç–µ–ª–µ—Ñ–æ–Ω: {i[6]}\n', reply_markup=kb)


                if len(ads) > 1:
                    next = InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='nextpage')
                    cnck = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel')
                    pagekb = InlineKeyboardMarkup(row_width=2).add(cnck, next)
                    await bot.send_message(chat_id=callback_query.from_user.id,
                                           text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                                           reply_markup=pagekb)
                elif len(ads) == 1:
                    cnck = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel')
                    pagekb = InlineKeyboardMarkup(row_width=2).add(cnck)
                    await bot.send_message(chat_id=callback_query.from_user.id,
                                           text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                                           reply_markup=pagekb)

# Watch my ads logic
    @dp.message_handler(state=Myads.pages)
    async def adwatch_page_my(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            ads = data['pages']
        if message.text.isdigit() == False or int(message.text) > len(ads):
            cnck = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel')
            kb = InlineKeyboardMarkup(row_width=1).add(cnck)
            await message.answer('–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', reply_markup=kb)
        else:
            async with state.proxy() as data:
                data['page'] = int(message.text)
            for i in ads[int(message.text) - 1]:
                buttons = [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—åüóëÔ∏è', callback_data=f'delete_{i[0]}')]
                kb = InlineKeyboardMarkup(row_width=1).add(*buttons)
                await bot.send_photo(chat_id=message.chat.id, photo=InputFile(os.getcwd() + i[4]),
                                     caption=f' –ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[3]}\n–¶–µ–Ω–∞: {i[5]}‚ÇΩ\nUsername/—Ç–µ–ª–µ—Ñ–æ–Ω: {i[6]}\n',reply_markup=kb)
            await message.answer(f'C—Ç—Ä–∞–Ω–∏—Ü–∞ {message.text} –∏–∑ {len(ads)}')
            if message.text == '1':
                if len(ads) > 1:
                    cnck = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel')
                    next = InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='nextpage')
                    pagekb = InlineKeyboardMarkup(row_width=2).add(cnck, next)
                    await bot.send_message(chat_id=message.from_user.id,
                                           text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                                           reply_markup=pagekb)
            elif message.text == str(len(ads)) and message.text != '1':
                cnck = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel')
                last = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='lastpage')
                pagekb = InlineKeyboardMarkup(row_width=2).add(cnck, last)
                await bot.send_message(chat_id=message.from_user.id,
                                       text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                                       reply_markup=pagekb)
            else:
                next = InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='nextpage')
                last = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='lastpage')
                cnck = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel')
                pagekb = InlineKeyboardMarkup(row_width=2).add(last, next, cnck)
                await bot.send_message(chat_id=message.from_user.id,
                                       text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                                       reply_markup=pagekb)

    @dp.callback_query_handler(state=Myads.pages)
    async def pagebutns_my(callback_query: types.CallbackQuery,state=FSMContext):
        if callback_query.data == 'nextpage':
            try:
                async with state.proxy() as data:
                    ads = data['pages']
                    page = int(data['page'])
                if page > len(ads):
                    await callback_query.message.answer('–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', reply_markup=gmkb)
                else:
                    async with state.proxy() as data:
                        data['page'] += 1
                        page = data['page']
                    for i in ads[page - 1]:
                        buttons = [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—åüóëÔ∏è', callback_data=f'delete_{i[0]}')]
                        kb = InlineKeyboardMarkup(row_width=1).add(*buttons)
                        await bot.send_photo(chat_id=callback_query.from_user.id, photo=InputFile(os.getcwd() + i[4]),
                                         caption=f' –ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[3]}\n–¶–µ–Ω–∞: {i[5]}‚ÇΩ\nUsername/—Ç–µ–ª–µ—Ñ–æ–Ω: {i[6]}\n',reply_markup=kb)
                    await callback_query.message.answer(f'C—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {len(ads)}')
                    if str(page) == '1':
                        if len(ads) > 1:
                            cnck = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel')
                            next = InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='nextpage')
                            pagekb = InlineKeyboardMarkup(row_width=2).add(cnck,next)
                            await bot.send_message(chat_id=callback_query.from_user.id, text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                                               reply_markup=pagekb)
                    elif str(page) == str(len(ads)) and str(page) != '1':
                        cnck = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel')
                        last = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='lastpage')
                        pagekb = InlineKeyboardMarkup(row_width=2).add(cnck,last)
                        await bot.send_message(chat_id=callback_query.from_user.id, text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                                           reply_markup=pagekb)
                    else:
                        next = InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='nextpage')
                        last = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='lastpage')
                        cnck = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel')
                        pagekb = InlineKeyboardMarkup(row_width=2).add(last, next, cnck)
                        await bot.send_message(chat_id=callback_query.from_user.id, text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                                           reply_markup=pagekb)
            except Exception as inst:
                print(inst)
                await bot.send_message(chat_id=callback_query.from_user.id, text='Bot exception!')

        elif callback_query.data == 'lastpage':
            try:
                async with state.proxy() as data:
                    ads = data['pages']
                    page = int(data['page'])
                if page > len(ads):
                    await callback_query.message.answer('–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', reply_markup=gmkb)
                else:
                    async with state.proxy() as data:
                        data['page'] -= 1
                        page = data['page']
                    for i in ads[page - 1]:
                        buttons = [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—åüóëÔ∏è', callback_data=f'delete_{i[0]}')]
                        kb = InlineKeyboardMarkup(row_width=1).add(*buttons)
                        await bot.send_photo(chat_id=callback_query.from_user.id, photo=InputFile(os.getcwd() + i[4]),
                                         caption=f' –ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[3]}\n–¶–µ–Ω–∞: {i[5]}‚ÇΩ\nUsername/—Ç–µ–ª–µ—Ñ–æ–Ω: {i[6]}\n',reply_markup=kb)
                    await callback_query.message.answer(f'C—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {len(ads)}')
                    if str(page) == '1':
                        if len(ads) > 1:
                            cnck = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel')
                            next = InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='nextpage')
                            pagekb = InlineKeyboardMarkup(row_width=2).add(cnck,next)
                            await bot.send_message(chat_id=callback_query.from_user.id, text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                                               reply_markup=pagekb)
                    elif str(page) == str(len(ads)) and str(page) != '1':
                        cnck = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel')
                        last = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='lastpage')
                        pagekb = InlineKeyboardMarkup(row_width=2).add(cnck,last)
                        await bot.send_message(chat_id=callback_query.from_user.id, text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                                           reply_markup=pagekb)
                    else:
                        next = InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='nextpage')
                        last = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='lastpage')
                        cnck = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel')
                        pagekb = InlineKeyboardMarkup(row_width=2).add(last, next, cnck)
                        await bot.send_message(chat_id=callback_query.from_user.id, text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                                           reply_markup=pagekb)
            except:
                await bot.send_message(chat_id=callback_query.from_user.id, text='Bot exception!')

        elif callback_query.data[:6] == 'delete':
            id_ad = int(callback_query.data[7:])
            await db.delete_ad(id_ad)
            async with state.proxy() as data:
                data['pages'] = await db.get_my_ads(callback_query.from_user.id)
            await callback_query.message.delete()

# Admin logic

    @dp.message_handler(state=Admin.AdminPannel)
    async def admin(message: types.Message,state: FSMContext):
        if message.text=='–í—ã—Ö–æ–¥üèÉ':
            await state.reset_state()
            await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!‚ùå',reply_markup=types.ReplyKeyboardRemove())
            await start_message_send(message.from_user.id)
        elif message.text=='–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π‚úî':
            ads = await db.moder_ad()
            if len(ads)==0:
                await message.answer('–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏')
            else:
                for i in ads:
                    buttons = [InlineKeyboardButton('–û—Ç–∫–ª–æ–Ω–∏—Ç—å‚ùå', callback_data=f'reject_{i[0]}'),InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å‚úÖ', callback_data=f'accept_{i[0]}')]
                    kb = InlineKeyboardMarkup(row_width=2).add(*buttons)
                    await bot.send_photo(chat_id=message.from_user.id, photo=InputFile(os.getcwd() + i[4]),
                                     caption=f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {i[1]}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[3]}\n–¶–µ–Ω–∞: {i[5]}‚ÇΩ\nUsername/—Ç–µ–ª–µ—Ñ–æ–Ω: {i[6]}\n',reply_markup=kb)
        elif message.text=='–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–πüóëÔ∏è':
            await state.set_state('Admin:DeleteAds')
            ads = await db.watch_delete_ad()
            async with state.proxy() as data:
                data['DeletAds'] = ads
            if len(ads) == 0:
                await message.answer('–ü–æ–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç:(', reply_markup=cnkb)
            else:
                for i in ads[0]:
                    buttons = [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—åüóëÔ∏è', callback_data=f'delete_{i[0]}')]
                    kb = InlineKeyboardMarkup(row_width=1).add(*buttons)
                    await bot.send_photo(chat_id=message.from_user.id, photo=InputFile(os.getcwd() + i[4]),
                                         caption=f' –ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[3]}\n–¶–µ–Ω–∞: {i[5]}‚ÇΩ\nUsername/—Ç–µ–ª–µ—Ñ–æ–Ω: {i[6]}\n',reply_markup=kb)
                await message.answer('–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 2)',
                                          reply_markup=cnkb)
        elif message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä':
            result = await db.get_stats()
            await message.answer(result[0])
            await bot.send_photo(chat_id=message.from_user.id,photo=InputFile(os.getcwd()+'/images/stats/' + result[1] + '.png'), caption='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')

    @dp.message_handler(state=Admin.DeleteAds)
    async def adwatch_page(message: types.Message,state: FSMContext):
        async with state.proxy() as data:
            ads = data['DeletAds']
        if message.text.isdigit() == False or int(message.text)>len(ads):
            await message.answer('–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!',reply_markup=cnkb)
        else:
            for i in ads[int(message.text)-1]:
                buttons = [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—åüóëÔ∏è', callback_data=f'delete_{i[0]}')]
                kb = InlineKeyboardMarkup(row_width=1).add(*buttons)
                await bot.send_photo(chat_id=message.from_user.id, photo=InputFile(os.getcwd() + i[4]),
                                     caption=f' –ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[3]}\n–¶–µ–Ω–∞: {i[5]}‚ÇΩ\nUsername/—Ç–µ–ª–µ—Ñ–æ–Ω: {i[6]}\n',
                                     reply_markup=kb)
            await message.answer(f'C—Ç—Ä–∞–Ω–∏—Ü–∞ {message.text} –∏–∑ {len(ads)}',reply_markup=cnkb)

    @dp.callback_query_handler(state=Admin.AdminPannel)
    async def api(call: types.CallbackQuery, state: FSMContext):
        if call.data[:6]=='reject':
            id_ad = int(call.data[7:])
            result = await db.reject_ad(id_ad)
            await call.message.delete()
            try:
                await bot.send_message(result[0], result[1])
            except:
                pass
        if call.data[:6]=='accept':
            id_ad = int(call.data[7:])
            result = await db.accept_ad(id_ad)
            await call.message.delete()
            try:
                if TGCHANNEL:
                    i = result[2]
                    await bot.send_photo(chat_id=TGCHANNEL, photo=InputFile(os.getcwd() + i[4]),
                                         caption=f'#–Ω–æ–≤–æ–µ–æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {i[1]}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[3]}\n–¶–µ–Ω–∞: {i[5]}‚ÇΩ\nUsername/—Ç–µ–ª–µ—Ñ–æ–Ω: {i[6]}\n')
                await bot.send_message(result[0],result[1])
            except:
                pass

    @dp.callback_query_handler(state=Admin.DeleteAds)
    async def api_del(call: types.CallbackQuery, state: FSMContext):
        if call.data=='cancel':
            await state.set_state('Admin:AdminPannel')
            await call.message.answer('–í—ã –≤—ã—à–ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')
        elif call.data[:6]=='delete':
            id_ad = int(call.data[7:])
            await db.delete_ad(id_ad)
            async with state.proxy() as data:
                data['DeletAds'] = await db.watch_delete_ad()
            await call.message.delete()


# create AD logic

    @dp.callback_query_handler(state=NewAd.type)
    async def ad_type(call: types.CallbackQuery,state: FSMContext):
        async with state.proxy() as data:
            data['type'] = call.data
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞(–¥–æ 66 —Å–∏–º–≤–æ–ª–æ–≤)',reply_markup=cnkb)
        await NewAd.next()

    @dp.message_handler(state=NewAd.name)
    async def ad_name(message: types.Message,state: FSMContext):
        if len(message.text)>66:
            await message.answer('–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–æ–ª—å—à–µ 66!!')
        else:
            async with state.proxy() as data:
                data['name'] = message.text
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞(–¥–æ 650 —Å–∏–º–≤–æ–ª–æ–≤)',reply_markup=cnkb)
            await NewAd.next()

    @dp.message_handler(state=NewAd.description)
    async def ad_desc(message: types.Message,state: FSMContext):
        if len(message.text)>650:
            await message.answer('–î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ–ª—å—à–µ 650!!')
        else:
            async with state.proxy() as data:
                data['description'] = message.text
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞',reply_markup=cnkb)
            await NewAd.next()

    @dp.message_handler(lambda message: not message.photo,state=NewAd.photo)
    async def ad_photo_check(message: types.Message):
        await message.answer('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ!')

    @dp.message_handler(content_types=['photo'],state=NewAd.photo)
    async def ad_photo(message: types.Message,state: FSMContext):
        await message.photo[-1].download(destination_dir=f'{os.getcwd()}/images')
        photo_id = message.photo[-1].file_id
        file_info = await bot.get_file(photo_id)
        async with state.proxy() as data:
            data['photo'] = f'/images/{file_info.file_path}'
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞',reply_markup=cnkb)
        await NewAd.next()

    @dp.message_handler(state=NewAd.price)
    async def ad_price(message: types.Message,state: FSMContext):
        try:
            async with state.proxy() as data:
                data['price'] = float(message.text)
            await message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π username –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –≤ –≤–∏–¥–µ @userid –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ ".", —Ç–æ –≤–∞—à —é–∑–µ—Ä–Ω–µ–π–º(@{message.from_user.username}) –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.', reply_markup=cnkb)
            await NewAd.next()
        except:
            await message.answer('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!')

    @dp.message_handler(state=NewAd.userid)
    async def ad_uid(message: types.Message,state: FSMContext):
        async with state.proxy() as data:
            if message.text == '.':
                data['userid'] = f'@{message.from_user.username}'
            else:
                data['userid'] = message.text
            userfromid = message.from_user.id
        await message.answer('–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!')
        await start_message_send(message.from_user.id)
        async with state.proxy() as data:
            await db.add_ad(state, userfromid)
        await state.finish()

# watch AD logic

    @dp.callback_query_handler(state=WatchAd.type)
    async def adwatch_type(call: types.CallbackQuery, state: FSMContext):
        async with state.proxy() as data:
            data['pages'] = await db.get_ad(call.data)
            data['page'] = 1
        async with state.proxy() as data:
            ads = data['pages']

        if len(ads)==0:
            await state.set_state('WatchAd:page')
            await call.message.answer('–ü–æ–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç:(',reply_markup=gmkb)
        else:
            for i in ads[0]:
                await bot.send_photo(chat_id=call.from_user.id, photo=InputFile(os.getcwd() + i[4]),
                                 caption=f' –ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[3]}\n–¶–µ–Ω–∞: {i[5]}‚ÇΩ\nUsername/—Ç–µ–ª–µ—Ñ–æ–Ω: {i[6]}\n')
            #await call.message.answer('„Ö§',
                             #reply_markup=cnkb)
            await state.set_state('WatchAd:page')
            if len(ads)>1:
                next = InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='nextpage')
                cnck = InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='cancel')
                pagekb = InlineKeyboardMarkup(row_width=2).add(cnck,next)
                await bot.send_message(chat_id=call.from_user.id,text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',reply_markup=pagekb)
            elif len(ads)==1:
                cnck = InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='cancel')
                pagekb = InlineKeyboardMarkup(row_width=2).add(cnck)
                await bot.send_message(chat_id=call.from_user.id,text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',reply_markup=pagekb)


    @dp.message_handler(state=WatchAd.page)
    async def adwatch_page(message: types.Message,state: FSMContext):
        async with state.proxy() as data:
            ads = data['pages']
        if message.text.isdigit() == False or int(message.text)>len(ads):
            await message.answer('–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!',reply_markup=gmkb)
        else:
            async with state.proxy() as data:
                data['page'] = int(message.text)
            for i in ads[int(message.text)-1]:
                await bot.send_photo(chat_id=message.chat.id, photo=InputFile(os.getcwd() + i[4]),
                                 caption=f' –ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[3]}\n–¶–µ–Ω–∞: {i[5]}‚ÇΩ\nUsername/—Ç–µ–ª–µ—Ñ–æ–Ω: {i[6]}\n')
            await message.answer(f'C—Ç—Ä–∞–Ω–∏—Ü–∞ {message.text} –∏–∑ {len(ads)}')
            if message.text == '1':
                if len(ads) > 1:
                    cnck = InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='cancel')
                    next = InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='nextpage')
                    pagekb = InlineKeyboardMarkup(row_width=2).add(cnck,next)
                    await bot.send_message(chat_id=message.from_user.id,text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',reply_markup=pagekb)
            elif message.text == str(len(ads)) and message.text!='1':
                cnck = InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='cancel')
                last = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='lastpage')
                pagekb = InlineKeyboardMarkup(row_width=2).add(cnck,last)
                await bot.send_message(chat_id=message.from_user.id,text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',reply_markup=pagekb)
            else:
                next = InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='nextpage')
                last = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='lastpage')
                cnck = InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='cancel')
                pagekb = InlineKeyboardMarkup(row_width=2).add(last,next,cnck)
                await bot.send_message(chat_id=message.from_user.id,text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',reply_markup=pagekb)

    @dp.callback_query_handler(state=WatchAd.page)
    async def pagebutns(callback_query: types.CallbackQuery,state=FSMContext):
        if callback_query.data == 'nextpage':
            try:
                async with state.proxy() as data:
                    ads = data['pages']
                    page = int(data['page'])
                if page > len(ads):
                    await callback_query.message.answer('–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', reply_markup=gmkb)
                else:
                    async with state.proxy() as data:
                        data['page'] += 1
                        page = data['page']
                    for i in ads[page - 1]:
                        await bot.send_photo(chat_id=callback_query.from_user.id, photo=InputFile(os.getcwd() + i[4]),
                                         caption=f' –ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[3]}\n–¶–µ–Ω–∞: {i[5]}‚ÇΩ\nUsername/—Ç–µ–ª–µ—Ñ–æ–Ω: {i[6]}\n')
                    await callback_query.message.answer(f'C—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {len(ads)}')
                    if str(page) == '1':
                        if len(ads) > 1:
                            cnck = InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='cancel')
                            next = InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='nextpage')
                            pagekb = InlineKeyboardMarkup(row_width=2).add(cnck,next)
                            await bot.send_message(chat_id=callback_query.from_user.id, text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                                               reply_markup=pagekb)
                    elif str(page) == str(len(ads)) and str(page) != '1':
                        cnck = InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='cancel')
                        last = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='lastpage')
                        pagekb = InlineKeyboardMarkup(row_width=2).add(cnck,last)
                        await bot.send_message(chat_id=callback_query.from_user.id, text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                                           reply_markup=pagekb)
                    else:
                        next = InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='nextpage')
                        last = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='lastpage')
                        cnck = InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='cancel')
                        pagekb = InlineKeyboardMarkup(row_width=2).add(last, next, cnck)
                        await bot.send_message(chat_id=callback_query.from_user.id, text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                                           reply_markup=pagekb)
            except Exception as inst:
                print(inst)
                await bot.send_message(chat_id=callback_query.from_user.id, text='Bot exception!')

        elif callback_query.data == 'lastpage':
            try:
                async with state.proxy() as data:
                    ads = data['pages']
                    page = int(data['page'])
                if page > len(ads):
                    await callback_query.message.answer('–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', reply_markup=gmkb)
                else:
                    async with state.proxy() as data:
                        data['page'] -= 1
                        page = data['page']
                    for i in ads[page - 1]:
                        await bot.send_photo(chat_id=callback_query.from_user.id, photo=InputFile(os.getcwd() + i[4]),
                                         caption=f' –ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[3]}\n–¶–µ–Ω–∞: {i[5]}‚ÇΩ\nUsername/—Ç–µ–ª–µ—Ñ–æ–Ω: {i[6]}\n')
                    await callback_query.message.answer(f'C—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {len(ads)}')
                    if str(page) == '1':
                        if len(ads) > 1:
                            cnck = InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='cancel')
                            next = InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='nextpage')
                            pagekb = InlineKeyboardMarkup(row_width=2).add(cnck,next)
                            await bot.send_message(chat_id=callback_query.from_user.id, text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                                               reply_markup=pagekb)
                    elif str(page) == str(len(ads)) and str(page) != '1':
                        cnck = InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='cancel')
                        last = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='lastpage')
                        pagekb = InlineKeyboardMarkup(row_width=2).add(cnck,last)
                        await bot.send_message(chat_id=callback_query.from_user.id, text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                                           reply_markup=pagekb)
                    else:
                        next = InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='nextpage')
                        last = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='lastpage')
                        cnck = InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='cancel')
                        pagekb = InlineKeyboardMarkup(row_width=2).add(last, next, cnck)
                        await bot.send_message(chat_id=callback_query.from_user.id, text='–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                                           reply_markup=pagekb)
            except:
                await bot.send_message(chat_id=callback_query.from_user.id, text='Bot exception!')

# polling
    executor.start_polling(dp, skip_updates=True)

# Programming BASE
if __name__=='__main__':
    db = DataBase()
    main()
