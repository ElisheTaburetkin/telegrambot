# aiogram
from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State,StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton,InputFile
from aiogram.dispatcher.filters import Text

# bot config
from bot_config import *

#for watch project dir
import os

# Database
from SQLWORK import DataBase
import sqlite3

# creating bot and dispatcher
storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot, storage=storage)

# States
class NewAd(StatesGroup):
    type = State()
    name = State()
    description = State()
    photo = State()
    price = State()
    userid = State()

class WatchAd(StatesGroup):
    type = State()
    pages = State()
    page = State()

class Admin(StatesGroup):
    AdminPannel = State()
    DeleteAds = State()

def main():

    # START KEYBOARD
    watch_ob = InlineKeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è', callback_data='watch')
    create_ob = InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data='create')
    startkb = InlineKeyboardMarkup(row_width=1).add(watch_ob,create_ob)

    # ADMIN KEYBOARD
    admin_buttons = ['–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π‚úî', '–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–πüóëÔ∏è', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä', '–í—ã—Ö–æ–¥üèÉ']
    admin_kb = ReplyKeyboardMarkup(resize_keyboard=True)
    admin_kb.add(*admin_buttons)


    # CATEGORY KEYBOARD
    catbuttons = [InlineKeyboardButton('–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data='–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'),InlineKeyboardButton('–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ', callback_data='–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ'),InlineKeyboardButton('–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ —Å–∫–ª–∞–¥', callback_data='–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ —Å–∫–ª–∞–¥'),InlineKeyboardButton('–î–ª—è –º–∞–≥–∞–∑–∏–Ω–∞', callback_data='–î–ª—è –º–∞–≥–∞–∑–∏–Ω–∞'),InlineKeyboardButton('–î–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞', callback_data='–î–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞'),InlineKeyboardButton('–î–ª—è —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã', callback_data='–î–ª—è —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã'),InlineKeyboardButton('–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ', callback_data='–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ'),InlineKeyboardButton('–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ', callback_data='–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ'),InlineKeyboardButton('–î—Ä—É–≥–æ–µ', callback_data='–î—Ä—É–≥–æ–µ'),InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel')]
    ctkb = InlineKeyboardMarkup(row_width=1).add(*catbuttons)
    catcrbuttons = [
                  InlineKeyboardButton('–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ', callback_data='–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ'),
                  InlineKeyboardButton('–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ —Å–∫–ª–∞–¥', callback_data='–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ —Å–∫–ª–∞–¥'),
                  InlineKeyboardButton('–î–ª—è –º–∞–≥–∞–∑–∏–Ω–∞', callback_data='–î–ª—è –º–∞–≥–∞–∑–∏–Ω–∞'),
                  InlineKeyboardButton('–î–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞', callback_data='–î–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞'),
                  InlineKeyboardButton('–î–ª—è —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã', callback_data='–î–ª—è —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã'),
                  InlineKeyboardButton('–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ', callback_data='–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ'),
                  InlineKeyboardButton('–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ', callback_data='–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ'),
                  InlineKeyboardButton('–î—Ä—É–≥–æ–µ', callback_data='–î—Ä—É–≥–æ–µ'),
                  InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel')]
    ctkbc = InlineKeyboardMarkup(row_width=1).add(*catcrbuttons)

    # CANCEL KEYBOARD
    cnck = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='cancel')
    cnkb = InlineKeyboardMarkup(row_width=1).add(cnck)

# start command logic

    @dp.message_handler(commands=['start'])
    async def process_start_command(message: types.Message):
        await db.add_user(message.from_user.id)
        await bot.send_photo(message.chat.id, photo=InputFile("images/doska-obyavlenii.png"), caption="–®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ—Ç –Ω–∞–¥–µ–∂–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π. –ù–∞ –Ω–∞—à–µ–π –¥–æ—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å—Ç–∞–Ω–∫–∏, —Ä–µ–∑–∞–∫–∏, –ø—Ä–µ—Å—Å-—Ñ–æ—Ä–º—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π. –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.",reply_markup=startkb)

# admin command logic
    @dp.message_handler(commands=['admin'])
    async def process_admin_command(message: types.Message,state: FSMContext):
        await message.answer('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞...')
        if str(message.from_user.id) in ADMINUID:
            await message.answer('–î–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω!‚úÖ',reply_markup=admin_kb)
            await state.set_state('Admin:AdminPannel')
        else:
            await message.answer('–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ‚ùå')

# cancel button logic

    @dp.callback_query_handler(lambda c: c.data == 'cancel',state=NewAd)
    async def process_callback_button(callback_query: types.CallbackQuery, state: FSMContext):
        current_state = await state.get_state()
        if current_state=='NewAd:type':
            await state.reset_state()
            await bot.send_photo(callback_query.from_user.id, photo=InputFile("images/doska-obyavlenii.png"),
                                 caption="–®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ—Ç –Ω–∞–¥–µ–∂–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π. –ù–∞ –Ω–∞—à–µ–π –¥–æ—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å—Ç–∞–Ω–∫–∏, —Ä–µ–∑–∞–∫–∏, –ø—Ä–µ—Å—Å-—Ñ–æ—Ä–º—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π. –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.",
                                 reply_markup=startkb)
        elif current_state=='NewAd:name':
            await state.set_state('NewAd:type')
            await bot.send_message(chat_id=callback_query.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞',
                                   reply_markup=ctkbc)
        elif current_state == 'NewAd:description':
            await state.set_state('NewAd:name')
            await bot.send_message(chat_id=callback_query.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
                                   reply_markup=cnkb)
        elif current_state == 'NewAd:photo':
            await state.set_state('NewAd:description')
            await bot.send_message(chat_id=callback_query.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
                                   reply_markup=cnkb)
        elif current_state == 'NewAd:price':
            await state.set_state('NewAd:photo')
            await bot.send_message(chat_id=callback_query.from_user.id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞',
                                   reply_markup=cnkb)
        elif current_state == 'NewAd:userid':
            await state.set_state('NewAd:price')
            await bot.send_message(chat_id=callback_query.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞',
                                   reply_markup=cnkb)

    @dp.callback_query_handler(lambda c: c.data == 'cancel', state=WatchAd)
    async def process_callback_button(callback_query: types.CallbackQuery, state: FSMContext):
        current_state = await state.get_state()
        if current_state == 'WatchAd:type':
            await state.reset_state()
            await bot.send_photo(callback_query.from_user.id, photo=InputFile("images/doska-obyavlenii.png"),
                                 caption="–®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ—Ç –Ω–∞–¥–µ–∂–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π. –ù–∞ –Ω–∞—à–µ–π –¥–æ—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å—Ç–∞–Ω–∫–∏, —Ä–µ–∑–∞–∫–∏, –ø—Ä–µ—Å—Å-—Ñ–æ—Ä–º—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π. –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.",
                                 reply_markup=startkb)
        elif current_state == 'WatchAd:page':
            await state.set_state('WatchAd:type')
            await bot.send_message(chat_id=callback_query.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞',
                                   reply_markup=ctkb)

# create or watch select

    @dp.callback_query_handler()
    async def newad(callback_query: types.CallbackQuery):
        if callback_query.data == 'create':
            await NewAd.type.set()
            await bot.send_message(chat_id=callback_query.from_user.id,text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞',reply_markup=ctkbc)
        elif callback_query.data == 'watch':
            await WatchAd.type.set()
            await bot.send_message(chat_id=callback_query.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞',
                                   reply_markup=ctkb)

# Admin logic

    @dp.message_handler(state=Admin.AdminPannel)
    async def admin(message: types.Message,state: FSMContext):
        if message.text=='–í—ã—Ö–æ–¥üèÉ':
            await state.reset_state()
            await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!‚ùå',reply_markup=types.ReplyKeyboardRemove())
            await bot.send_photo(message.from_user.id, photo=InputFile("images/doska-obyavlenii.png"),
                                 caption="–®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ—Ç –Ω–∞–¥–µ–∂–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π. –ù–∞ –Ω–∞—à–µ–π –¥–æ—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å—Ç–∞–Ω–∫–∏, —Ä–µ–∑–∞–∫–∏, –ø—Ä–µ—Å—Å-—Ñ–æ—Ä–º—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π. –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.",
                                 reply_markup=startkb)
        elif message.text=='–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π‚úî':
            ads = await db.moder_ad()
            if len(ads)==0:
                await message.answer('–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏')
            else:
                for i in ads:
                    buttons = [InlineKeyboardButton('–û—Ç–∫–ª–æ–Ω–∏—Ç—å‚ùå', callback_data=f'reject_{i[0]}'),InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å‚úÖ', callback_data=f'accept_{i[0]}')]
                    kb = InlineKeyboardMarkup(row_width=2).add(*buttons)
                    await bot.send_photo(chat_id=message.from_user.id, photo=InputFile(os.getcwd() + i[4]),
                                     caption=f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {i[1]}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[3]}\n–¶–µ–Ω–∞: {i[5]}‚ÇΩ\nUsername: {i[6]}\n',reply_markup=kb)
        elif message.text=='–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–πüóëÔ∏è':
            await state.set_state('Admin:DeleteAds')
            ads = await db.watch_delete_ad()
            async with state.proxy() as data:
                data['DeletAds'] = ads
            if len(ads) == 0:
                await message.answer('–ü–æ–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç:(', reply_markup=cnkb)
            else:
                for i in ads[0]:
                    buttons = [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—åüóëÔ∏è', callback_data=f'delete_{i[0]}')]
                    kb = InlineKeyboardMarkup(row_width=1).add(*buttons)
                    await bot.send_photo(chat_id=message.from_user.id, photo=InputFile(os.getcwd() + i[4]),
                                         caption=f' –ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[3]}\n–¶–µ–Ω–∞: {i[5]}‚ÇΩ\nUsername: {i[6]}\n',reply_markup=kb)
                await message.answer('–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 2)',
                                          reply_markup=cnkb)
        elif message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä':
            result = await db.get_stats()
            await message.answer(result[0])
            await bot.send_photo(chat_id=message.from_user.id,photo=InputFile(os.getcwd()+'\\images\\stats\\' + result[1] + '.png'), caption='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')

    @dp.message_handler(state=Admin.DeleteAds)
    async def adwatch_page(message: types.Message,state: FSMContext):
        async with state.proxy() as data:
            ads = data['DeletAds']
        if message.text.isdigit() == False or int(message.text)>len(ads):
            await message.answer('–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!',reply_markup=cnkb)
        else:
            for i in ads[int(message.text)-1]:
                buttons = [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—åüóëÔ∏è', callback_data=f'delete_{i[0]}')]
                kb = InlineKeyboardMarkup(row_width=1).add(*buttons)
                await bot.send_photo(chat_id=message.from_user.id, photo=InputFile(os.getcwd() + i[4]),
                                     caption=f' –ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[3]}\n–¶–µ–Ω–∞: {i[5]}‚ÇΩ\nUsername: {i[6]}\n',
                                     reply_markup=kb)
            await message.answer(f'C—Ç—Ä–∞–Ω–∏—Ü–∞ {message.text} –∏–∑ {len(ads)}',reply_markup=cnkb)

    @dp.callback_query_handler(state=Admin.AdminPannel)
    async def api(call: types.CallbackQuery, state: FSMContext):
        if call.data[:6]=='reject':
            id_ad = int(call.data[7:])
            result = await db.reject_ad(id_ad)
            await call.message.delete()
            try:
                await bot.send_message(result[0], result[1])
            except:
                pass
        if call.data[:6]=='accept':
            id_ad = int(call.data[7:])
            result = await db.accept_ad(id_ad)
            await call.message.delete()
            try:
                if TGCHANNEL:
                    i = result[2]
                    await bot.send_photo(chat_id=TGCHANNEL, photo=InputFile(os.getcwd() + i[4]),
                                         caption=f'#–Ω–æ–≤–æ–µ–æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {i[1]}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[3]}\n–¶–µ–Ω–∞: {i[5]}‚ÇΩ\nUsername: {i[6]}\n')
                await bot.send_message(result[0],result[1])
            except:
                pass

    @dp.callback_query_handler(state=Admin.DeleteAds)
    async def api_del(call: types.CallbackQuery, state: FSMContext):
        if call.data=='cancel':
            await state.set_state('Admin:AdminPannel')
            await call.message.answer('–í—ã –≤—ã—à–ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')
        elif call.data[:6]=='delete':
            id_ad = int(call.data[7:])
            await db.delete_ad(id_ad)
            async with state.proxy() as data:
                data['DeletAds'] = await db.watch_delete_ad()
            await call.message.delete()


# create AD logic

    @dp.callback_query_handler(state=NewAd.type)
    async def ad_type(call: types.CallbackQuery,state: FSMContext):
        async with state.proxy() as data:
            data['type'] = call.data
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',reply_markup=cnkb)
        await NewAd.next()

    @dp.message_handler(state=NewAd.name)
    async def ad_name(message: types.Message,state: FSMContext):
        async with state.proxy() as data:
            data['name'] = message.text
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',reply_markup=cnkb)
        await NewAd.next()

    @dp.message_handler(state=NewAd.description)
    async def ad_desc(message: types.Message,state: FSMContext):
        async with state.proxy() as data:
            data['description'] = message.text
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞',reply_markup=cnkb)
        await NewAd.next()

    @dp.message_handler(lambda message: not message.photo,state=NewAd.photo)
    async def ad_photo_check(message: types.Message):
        await message.answer('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ!')

    @dp.message_handler(content_types=['photo'],state=NewAd.photo)
    async def ad_photo(message: types.Message,state: FSMContext):
        await message.photo[-1].download(destination_dir=f'{os.getcwd()}/images')
        photo_id = message.photo[-1].file_id
        file_info = await bot.get_file(photo_id)
        async with state.proxy() as data:
            data['photo'] = f'/images/{file_info.file_path}'
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞',reply_markup=cnkb)
        await NewAd.next()

    @dp.message_handler(state=NewAd.price)
    async def ad_price(message: types.Message,state: FSMContext):
        try:
            async with state.proxy() as data:
                data['price'] = float(message.text)
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π username –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –≤ –≤–∏–¥–µ @userid',reply_markup=cnkb)
            await NewAd.next()
        except:
            await message.answer('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!')

    @dp.message_handler(state=NewAd.userid)
    async def ad_uid(message: types.Message,state: FSMContext):
        if message.text[0]=='@':
            async with state.proxy() as data:
                data['userid'] = message.text
                userfromid = message.from_user.id
            await message.answer('–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!')
            await bot.send_photo(message.chat.id, photo=InputFile("images/doska-obyavlenii.png"),
                             caption="–®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ—Ç –Ω–∞–¥–µ–∂–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π. –ù–∞ –Ω–∞—à–µ–π –¥–æ—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å—Ç–∞–Ω–∫–∏, —Ä–µ–∑–∞–∫–∏, –ø—Ä–µ—Å—Å-—Ñ–æ—Ä–º—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π. –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.",
                             reply_markup=startkb)
            async with state.proxy() as data:
                await db.add_ad(state, userfromid)
            await state.finish()
        else:
            await message.answer('Username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω –≤ —Ñ–æ—Ä–º—Ç–∞—Ç–µ @username')

# watch AD logic

    @dp.callback_query_handler(state=WatchAd.type)
    async def adwatch_type(call: types.CallbackQuery, state: FSMContext):
        async with state.proxy() as data:
            data['pages'] = await db.get_ad(call.data)
            data['page'] = 1
        async with state.proxy() as data:
            ads = data['pages']

        if len(ads)==0:
            await call.message.answer('–ü–æ–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç:(',reply_markup=cnkb)
        else:
            for i in ads[0]:
                await bot.send_photo(chat_id=call.from_user.id, photo=InputFile(os.getcwd() + i[4]),
                                 caption=f' –ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[3]}\n–¶–µ–Ω–∞: {i[5]}‚ÇΩ\nUsername: {i[6]}\n')
            await call.message.answer('–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 2)',
                             reply_markup=cnkb)
            await state.set_state('WatchAd:page')

    @dp.message_handler(state=WatchAd.page)
    async def adwatch_page(message: types.Message,state: FSMContext):
        async with state.proxy() as data:
            ads = data['pages']
        if message.text.isdigit() == False or int(message.text)>len(ads):
            await message.answer('–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!',reply_markup=cnkb)
        else:
            for i in ads[int(message.text)-1]:
                await bot.send_photo(chat_id=message.chat.id, photo=InputFile(os.getcwd() + i[4]),
                                 caption=f' –ù–∞–∑–≤–∞–Ω–∏–µ: {i[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[3]}\n–¶–µ–Ω–∞: {i[5]}‚ÇΩ\nUsername: {i[6]}\n')
            await message.answer(f'C—Ç—Ä–∞–Ω–∏—Ü–∞ {message.text} –∏–∑ {len(ads)}',reply_markup=cnkb)

# polling
    executor.start_polling(dp, skip_updates=True)

# Programming BASE
if __name__=='__main__':
    db = DataBase()
    main()